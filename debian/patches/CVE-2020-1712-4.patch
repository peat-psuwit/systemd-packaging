Backport of:

From bc130b6858327b382b07b3985cf48e2aa9016b2d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
Date: Tue, 4 Feb 2020 18:39:04 +0100
Subject: [PATCH] Fix typo in function name

---
 TODO                            | 2 +-
 man/sd_bus_enqueue_for_read.xml | 2 +-
 src/libsystemd/libsystemd.sym   | 2 +-
 src/libsystemd/sd-bus/sd-bus.c  | 8 ++++----
 src/shared/bus-polkit.c         | 2 +-
 src/systemd/sd-bus.h            | 2 +-
 6 files changed, 9 insertions(+), 9 deletions(-)

--- a/src/libsystemd/libsystemd.sym
+++ b/src/libsystemd/libsystemd.sym
@@ -492,5 +492,5 @@ global:
 
 LIBSYSTEMD_245 {
 global:
-        sd_bus_enqeue_for_read;
+        sd_bus_enqueue_for_read;
 } LIBSYSTEMD_229;
--- a/src/libsystemd/sd-bus/sd-bus.c
+++ b/src/libsystemd/sd-bus/sd-bus.c
@@ -3793,7 +3793,7 @@ _public_ void sd_bus_default_flush_close
         flush_close(default_system_bus);
 }
 
-_public_ int sd_bus_enqeue_for_read(sd_bus *bus, sd_bus_message *m) {
+_public_ int sd_bus_enqueue_for_read(sd_bus *bus, sd_bus_message *m) {
         int r;
 
         assert_return(bus, -EINVAL);
@@ -3804,9 +3804,9 @@ _public_ int sd_bus_enqeue_for_read(sd_b
         if (!BUS_IS_OPEN(bus->state))
                 return -ENOTCONN;
 
-        /* Re-enqeue a message for reading. This is primarily useful for PolicyKit-style authentication,
-         * where we want accept a message, then determine we need to interactively authenticate the user, and
-         * when we have that process the message again. */
+        /* Re-enqueue a message for reading. This is primarily useful for PolicyKit-style authentication,
+         * where we accept a message, then determine we need to interactively authenticate the user, and then
+         * we want to process the message again. */
 
         r = bus_rqueue_make_room(bus);
         if (r < 0)
--- a/src/systemd/sd-bus.h
+++ b/src/systemd/sd-bus.h
@@ -178,7 +178,7 @@ int sd_bus_process(sd_bus *bus, sd_bus_m
 int sd_bus_process_priority(sd_bus *bus, int64_t max_priority, sd_bus_message **r);
 int sd_bus_wait(sd_bus *bus, uint64_t timeout_usec);
 int sd_bus_flush(sd_bus *bus);
-int sd_bus_enqeue_for_read(sd_bus *bus, sd_bus_message *m);
+int sd_bus_enqueue_for_read(sd_bus *bus, sd_bus_message *m);
 
 sd_bus_slot* sd_bus_get_current_slot(sd_bus *bus);
 sd_bus_message* sd_bus_get_current_message(sd_bus *bus);
--- a/src/shared/bus-util.c
+++ b/src/shared/bus-util.c
@@ -434,7 +434,7 @@ static int async_polkit_callback(sd_bus_
         if (r < 0)
                 goto fail;
 
-        r = sd_bus_enqeue_for_read(sd_bus_message_get_bus(q->request), q->request);
+        r = sd_bus_enqueue_for_read(sd_bus_message_get_bus(q->request), q->request);
         if (r < 0)
                 goto fail;
 
